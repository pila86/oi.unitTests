#Область ЮнитТесты

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ТестРассчитатьПоказатель(Фреймворк) Экспорт
	
	КоллекцияОбъектов = СоздатьКоллекциюОбъектов();
	
	КоллекцияПоказателей = Новый Массив();
	КоллекцияПоказателей.Добавить(НовыйПоказатель_ВыполнитьКод());
		
	Для Каждого Показатель Из КоллекцияПоказателей Цикл
		ПоказателиОбъектов.РассчитатьПоказатель(Показатель, КоллекцияОбъектов);
	КонецЦикла;
	
	ЭталоннаяТаблица = ПроверкаРасчетаПоказателя_ЭталоннаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей);
	ПроверяемаяТаблица = ПроверкаРасчетаПоказателя_ПроверяемаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей);
	
	ОчиститьЗначенияПоказателей(КоллекцияОбъектов, КоллекцияПоказателей);
	
	УдалитьПоказатели(КоллекцияПоказателей);
	
	УдалитьКоллекциюОбъектов(КоллекцияОбъектов);
	
	Фреймворк.ПроверитьРавенствоТаблиц(ЭталоннаяТаблица, ПроверяемаяТаблица, "Коллекции идентичны");
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ТестНайтиПоказательПоИдентификатору(Фреймворк) Экспорт
	
	Перем ПроверяемаяТаблица;
	
	ЭталоннаяТаблица = ТестНайтиПоказательПоИдентификатору_ИнициализироватьЭталоннуюТаблицу();
	
	НачатьТранзакцию();
		
	Попытка
		
		КоллекцияПоказателей = ТестНайтиПоказательПоИдентификатору_СоздатьПоказатели(ЭталоннаяТаблица, 100);
		ПроверяемаяТаблица = ТестНайтиПоказательПоИдентификатору_ПроверяемаяТаблица(ЭталоннаяТаблица);
		УдалитьКоллекциюПоказателей(КоллекцияПоказателей);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
	Фреймворк.ПроверитьРавенствоТаблиц(ЭталоннаяТаблица, ПроверяемаяТаблица, "Коллекции идентичны");
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ТестНайтиПоказателиПоИдентификаторам(Фреймворк) Экспорт
	
	Перем ПроверяемаяТаблица;
	
	ЭталоннаяТаблица = ТестНайтиПоказательПоИдентификатору_ИнициализироватьЭталоннуюТаблицу();
	
	НачатьТранзакцию();
		
	Попытка
		
		КоллекцияПоказателей = ТестНайтиПоказательПоИдентификатору_СоздатьПоказатели(ЭталоннаяТаблица, 100);
		ПроверяемаяТаблица = ТестНайтиПоказателиПоИдентификаторам_ПроверяемаяТаблица(ЭталоннаяТаблица);
		УдалитьКоллекциюПоказателей(КоллекцияПоказателей);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
	Фреймворк.ПроверитьРавенствоТаблиц(ЭталоннаяТаблица, ПроверяемаяТаблица, "Коллекции идентичны");
	
КонецПроцедуры


// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ТестЗначениеПоказателяОбъекта(Фреймворк) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		КоллекцияПоказателей = СоздатьКоллекциюПоказателейСКодомИНаименованием(2);
		КоллекцияОбъектов = СоздатьКоллекциюОбъектов(1);
		
		ТестЗначениеПоказателяОбъекта_ЗаписатьЗначениеПоказателя(КоллекцияОбъектов[0], КоллекцияПоказателей[0]);	
		ТестЗначениеПоказателяОбъекта_ЗаписатьЗначениеПоказателя(КоллекцияОбъектов[0], КоллекцияПоказателей[1], Истина);
		
		Значение1 = ПоказателиОбъектов.ЗначениеПоказателяОбъекта(КоллекцияОбъектов[0], КоллекцияПоказателей[0]);
		Значение2 = ПоказателиОбъектов.ЗначениеПоказателяОбъекта(КоллекцияОбъектов[0], КоллекцияПоказателей[1]);
		
		УдалитьКоллекциюПоказателей(КоллекцияПоказателей);
		УдалитьКоллекциюОбъектов(КоллекцияОбъектов);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Фреймворк.ПроверитьИстину(Значение1 = Истина, "Значение непериодического показателя не сходится");
	Фреймворк.ПроверитьИстину(Значение2 = Истина, "Значение периодического показателя не сходится");
	
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ТестЗначенияПоказателейОбъекта(Фреймворк) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		КоллекцияПоказателей = СоздатьКоллекциюПоказателейСКодомИНаименованием(10);
		КоллекцияОбъектов = СоздатьКоллекциюОбъектов(1);
		
		ЭталоннаяТаблица = ТестЗначенияПоказателейОбъекта_ЭталоннаяТаблица(КоллекцияПоказателей);
		
		ТестЗначенияПоказателейОбъекта_ЗаписатьЗначенияПоказателей(КоллекцияОбъектов[0], КоллекцияПоказателей);
		
		ПроверяемаяТаблица = ТестЗначенияПоказателейОбъекта_ПроверяемаяТаблица(КоллекцияОбъектов[0], КоллекцияПоказателей);
		
		УдалитьКоллекциюПоказателей(КоллекцияПоказателей);
		УдалитьКоллекциюОбъектов(КоллекцияОбъектов);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Фреймворк.ПроверитьРавенствоТаблиц(ЭталоннаяТаблица, ПроверяемаяТаблица, "Коллекции идентичны");
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ТестЗначенияПоказателейОбъектов(Фреймворк) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		КоллекцияПоказателей = СоздатьКоллекциюПоказателейСКодомИНаименованием(10);
		КоллекцияОбъектов = СоздатьКоллекциюОбъектов(100);
		
		ЭталоннаяТаблица = ТестЗначенияПоказателейОбъектов_ЭталоннаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей);
		
		ТестЗначенияПоказателейОбъектов_ЗаписатьЗначенияПоказателей(КоллекцияОбъектов, КоллекцияПоказателей);
		
		ПроверяемаяТаблица = ТестЗначенияПоказателейОбъектов_ПроверяемаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей);
		
		УдалитьКоллекциюПоказателей(КоллекцияПоказателей);
		УдалитьКоллекциюОбъектов(КоллекцияОбъектов);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Фреймворк.ПроверитьРавенствоТаблиц(ЭталоннаяТаблица, ПроверяемаяТаблица, "Коллекции идентичны");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеМетоды

Функция СоздатьКоллекциюПоказателейСКодомИНаименованием(Знач КоличествоЭлементов = 100, РеквизитыПоказателей = Неопределено)
	
	СозданныеПоказатели = Новый Массив;
	РеквизитыПоказателей = Новый Соответствие();
	
	Для НомерПоказателя = 1 По КоличествоЭлементов Цикл
		
		НомерПоказателяСтрокой = Формат(НомерПоказателя, "ЧЦ=10; ЧВН=; ЧГ=0;");
		
		ИмяПоказателя = СтрШаблон("ТестовыйПоказатель_%1", НомерПоказателяСтрокой);
		ИдентификаторПоказателя = ИмяПоказателя;
		
		НовыйПоказатель = ПланыВидовХарактеристик.ПоказателиОбъектов.СоздатьЭлемент();
		НовыйПоказатель.Код = ИдентификаторПоказателя;
		НовыйПоказатель.Наименование = ИмяПоказателя;
		
		НовыйПоказатель.ОбменДанными.Загрузка = Истина;
		НовыйПоказатель.Записать();
		
		НовыйПоказательСсылка = НовыйПоказатель.Ссылка;
		СозданныеПоказатели.Добавить(НовыйПоказательСсылка);
		
		ТекущиеРеквизиты = Новый Структура();
		ТекущиеРеквизиты.Вставить("Код",			НовыйПоказатель.Код);
		ТекущиеРеквизиты.Вставить("Наименование",	НовыйПоказатель.Наименование);
		
		РеквизитыПоказателей.Вставить(НовыйПоказательСсылка, ТекущиеРеквизиты);
		
	КонецЦикла;
	
	Возврат СозданныеПоказатели;
	
КонецФункции

Процедура УдалитьКоллекциюПоказателей(КоллекцияПоказателей)
	
	Для Каждого ТекущийПоказатель Из КоллекцияПоказателей Цикл
		
		ПоказательОбъект = ТекущийПоказатель.ПолучитьОбъект();
		ПоказательОбъект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТестРассчитатьПоказатель

Функция ПроверкаРасчетаПоказателя_Таблица()

	Результат = Новый ТаблицаЗначений();
	
	Результат.Колонки.Добавить("Объект");
	Результат.Колонки.Добавить("Показатель");
	Результат.Колонки.Добавить("ЗначениеПоказателя");
	
	Возврат Результат;

КонецФункции

Функция ПроверкаРасчетаПоказателя_ЭталоннаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей)
	
	Результат = ПроверкаРасчетаПоказателя_Таблица();
	
	Для Каждого СсылкаНаОбъект Из КоллекцияОбъектов Цикл
		
		Для Каждого Показатель Из КоллекцияПоказателей Цикл
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Объект = СсылкаНаОбъект.УникальныйИдентификатор();
			НоваяСтрока.Показатель = Показатель.УникальныйИдентификатор();
			НоваяСтрока.ЗначениеПоказателя = 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаРасчетаПоказателя_ПроверяемаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей)
	
	Результат = ПроверкаРасчетаПоказателя_Таблица();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КоллекцияОбъектов", КоллекцияОбъектов);
	Запрос.УстановитьПараметр("КоллекцияПоказателей", КоллекцияПоказателей);
	
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	ЗначенияПоказателейОбъектов.Объект КАК Объект,
		|	ЗначенияПоказателейОбъектов.Показатель КАК Показатель,
		|	ЗначенияПоказателейОбъектов.ЗначениеПоказателя КАК ЗначениеПоказателя
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОбъектов КАК ЗначенияПоказателейОбъектов
		|ГДЕ
		|	ЗначенияПоказателейОбъектов.Объект В (&КоллекцияОбъектов)
		|	И ЗначенияПоказателейОбъектов.Показатель В (&КоллекцияПоказателей)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	 
	 Для Каждого СсылкаНаОбъект Из КоллекцияОбъектов Цикл
		
		Для Каждого Показатель Из КоллекцияПоказателей Цикл
			
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(Новый Структура("Объект, Показатель", СсылкаНаОбъект, Показатель)) Тогда
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Объект = НоваяСтрока.Объект.УникальныйИдентификатор();
				НоваяСтрока.Показатель = НоваяСтрока.Показатель.УникальныйИдентификатор();
			КонецЕсли;
			
		КонецЦикла;
		
	 КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьКоллекциюОбъектов(Знач КоличествоЭлементов = 10) Экспорт
	
	СсылкаНаОбъектМетаданных = test_ОбщегоНазначенияПовтИсп.ПервыйПопавшийсяВладелецПоказателя();
	
	ПолноеИмяМетаданных = СсылкаНаОбъектМетаданных.ПолноеИмя;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	
	Если ЭтоСправочник(ПолноеИмяМетаданных) Тогда
		
		Возврат СоздатьКоллекциюОбъектов_Справочник(ОбъектМетаданных, КоличествоЭлементов);
		
	ИначеЕсли ЭтоДокумент(ПолноеИмяМетаданных) Тогда
		
		Возврат СоздатьКоллекциюОбъектов_Документ(ОбъектМетаданных, КоличествоЭлементов);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка сценария модульного теста.
							   |На данный момент реализовано тест только для владельцев показателей справочников и документов.'");
							   
	КонецЕсли;
	
КонецФункции

Функция СоздатьКоллекциюОбъектов_Справочник(ОбъектМетаданных, Знач КоличествоЭлементов = 10)
	
	МенеджерСправочника = Справочники[ОбъектМетаданных.Имя];
	
	Результат = Новый Массив();
	
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		НовыйОбъект = МенеджерСправочника.СоздатьЭлемент();
		НовыйОбъект.Наименование = Строка(Новый УникальныйИдентификатор());
		НовыйОбъект.Записать();
		
		Результат.Добавить(НовыйОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьКоллекциюОбъектов_Документ(ОбъектМетаданных, Знач КоличествоЭлементов = 10)
	
	МенеджерДокумента = Документы[ОбъектМетаданных.Имя];
	
	Результат = Новый Массив();
	
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		НовыйОбъект = МенеджерДокумента.СоздатьДокумент();
		НовыйОбъект.Дата = ТекущаяДатаСеанса();
		НовыйОбъект.Записать();
		
		Результат.Добавить(НовыйОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьКоллекциюОбъектов(КоллекцияОбъектов)
	
	Для Каждого СсылкаНаОбъект Из КоллекцияОбъектов Цикл
		ТекущийОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		ТекущийОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСправочник(ПолноеИмяМетаданных)
	
	Возврат СтрНайти(ПолноеИмяМетаданных, "Справочник.") > 0;
	
КонецФункции

Функция ЭтоДокумент(ПолноеИмяМетаданных)
	
	Возврат СтрНайти(ПолноеИмяМетаданных, "Документ.") > 0;
	
КонецФункции

Функция НовыйПоказатель_ВыполнитьКод()
	
	НовыйЭлемент = ПланыВидовХарактеристик.ПоказателиОбъектов.СоздатьЭлемент();
	
	НовыйЭлемент.Код = "Показатель_ВыполнитьКод";
	НовыйЭлемент.Наименование = "Показатель_ВыполнитьКод";
	НовыйЭлемент.СпособРасчета = Перечисления.СпособыРасчетаПоказателейОбъектов.ВыполнитьКод;
	НовыйЭлемент.ВыполняемыйКод =
		"Для Каждого ТекущийОбъект Из МассивОбъектов Цикл
		|	Результат.Вставить(ТекущийОбъект, 1);
		|КонецЦикла;";
		
	СтрокаВладельца = НовыйЭлемент.Владельцы.Добавить();
	СтрокаВладельца.Владелец = test_ОбщегоНазначенияПовтИсп.ПервыйПопавшийсяВладелецПоказателя();
		
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Процедура УдалитьПоказатели(КоллекцияПоказателей)
	
	Для Каждого Показатель Из КоллекцияПоказателей Цикл
		ПоказательОбъект = Показатель.ПолучитьОбъект();
		ПоказательОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЗначенияПоказателей(КоллекцияОбъектов, КоллекцияПоказателей)
	
	Для Каждого СсылкаНаОбъект Из КоллекцияОбъектов Цикл
		
		Для Каждого Показатель Из КоллекцияПоказателей Цикл
			
			НаборЗаписей = РегистрыСведений.ЗначенияПоказателейОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
			НаборЗаписей.Отбор.Показатель.Установить(Показатель);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТестНайтиПоказательПоИдентификатору

Функция ТестНайтиПоказательПоИдентификатору_ИнициализироватьЭталоннуюТаблицу()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатель", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат Результат;
	
КонецФункции

Функция ТестНайтиПоказательПоИдентификатору_СоздатьПоказатели(ЭталоннаяТаблица, Знач КоличествоЭлементов = 100)
	
	Перем РеквизитыПоказателей;
	
	СозданныеПоказатели = СоздатьКоллекциюПоказателейСКодомИНаименованием(КоличествоЭлементов, РеквизитыПоказателей);
	
	Для Каждого Показатель Из СозданныеПоказатели Цикл
		
		РеквизитыПоказателя = РеквизитыПоказателей[Показатель];
		
		НоваяСтрока = ЭталоннаяТаблица.Добавить();
		НоваяСтрока.Идентификатор = РеквизитыПоказателя.Код;
		НоваяСтрока.Показатель = Показатель.УникальныйИдентификатор();
		
	КонецЦикла;
	
	Возврат СозданныеПоказатели;
	
КонецФункции

Функция ТестНайтиПоказательПоИдентификатору_ПроверяемаяТаблица(ЭталоннаяТаблица)
	
	Результат = ЭталоннаяТаблица.СкопироватьКолонки();
	
	Для Каждого ЭталоннаяСтрока Из ЭталоннаяТаблица Цикл
		
		ПоказательСсылка = ПоказателиОбъектов.НайтиПоказательПоИдентификатору(ЭталоннаяСтрока.Идентификатор);
		ПоказательУникальныйИдентификатор =
			?(ЗначениеЗаполнено(ПоказательСсылка), ПоказательСсылка.УникальныйИдентификатор(), Неопределено);
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Идентификатор = ЭталоннаяСтрока.Идентификатор;
		НоваяСтрока.Показатель = ПоказательУникальныйИдентификатор;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТестНайтиПоказателиПоИдентификаторам_ПроверяемаяТаблица(ЭталоннаяТаблица)
	
	Результат = ЭталоннаяТаблица.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИдентификаторов", ЭталоннаяТаблица.ВыгрузитьКолонку("Идентификатор"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиОбъектов.Код КАК Код,
		|	МАКСИМУМ(ПоказателиОбъектов.Ссылка) КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ПоказателиОбъектов КАК ПоказателиОбъектов
		|ГДЕ
		|	ПоказателиОбъектов.Код В (&МассивИдентификаторов)
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиОбъектов.Код
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Идентификатор = Выборка.Код;
		НоваяСтрока.Показатель = Выборка.Ссылка.УникальныйИдентификатор();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТестЗначенияПоказателейОбъектов

Функция ТестЗначенияПоказателейОбъектов_ЭталоннаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей) Экспорт
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Объект");
	Результат.Колонки.Добавить("Показатель");
	Результат.Колонки.Добавить("ЗначениеПоказателя");
	
	Если КоллекцияОбъектов.Количество() = 0 Или КоллекцияПоказателей.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого Объект Из КоллекцияОбъектов Цикл
		Для Каждого Показатель Из КоллекцияПоказателей Цикл
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Объект				= Объект.УникальныйИдентификатор();
			НоваяСтрока.Показатель			= Показатель.УникальныйИдентификатор();
			НоваяСтрока.ЗначениеПоказателя	= Истина;
			
		КонецЦикла;				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ТестЗначенияПоказателейОбъектов_ЗаписатьЗначенияПоказателей(КоллекцияОбъектов, КоллекцияПоказателей)
	
	Если КоллекцияОбъектов.Количество() = 0 Или КоллекцияПоказателей.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Для Каждого Объект Из КоллекцияОбъектов Цикл
		Для ИндексПоказателя = 0 По КоллекцияПоказателей.ВГраница() Цикл
			
			Показатель = КоллекцияПоказателей[ИндексПоказателя];
			
			ПериодическийРегистр = (ИндексПоказателя % 2 = 0);
			
			НаборЗаписей = ?(ПериодическийРегистр,
				РегистрыСведений.ЗначенияПериодическихПоказателейОбъектов.СоздатьНаборЗаписей(),
				РегистрыСведений.ЗначенияПоказателейОбъектов.СоздатьНаборЗаписей());
			
			Если ПериодическийРегистр Тогда
				//@skip-warning
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
			КонецЕсли;
			
			НаборЗаписей.Отбор.Объект.Установить(Объект);
			НаборЗаписей.Отбор.Показатель.Установить(Показатель);
			
			Запись = НаборЗаписей.Добавить();
			
			Если ПериодическийРегистр Тогда
				Запись.Период = ТекущаяДата;
			КонецЕсли;
			
			Запись.Объект = Объект;
			Запись.Показатель = Показатель;
			Запись.ЗначениеПоказателя = Истина;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ТестЗначенияПоказателейОбъектов_ПроверяемаяТаблица(КоллекцияОбъектов, КоллекцияПоказателей)
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Объект");
	Результат.Колонки.Добавить("Показатель");
	Результат.Колонки.Добавить("ЗначениеПоказателя");
	
	ЗначенияПоказателейОбъектов = ПоказателиОбъектов.ЗначенияПоказателейОбъектов(КоллекцияОбъектов, КоллекцияПоказателей);
	
	Для Каждого Объект Из КоллекцияОбъектов Цикл
		Для Каждого Показатель Из КоллекцияПоказателей Цикл
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Объект = Объект.УникальныйИдентификатор();
			НоваяСтрока.Показатель = Показатель.УникальныйИдентификатор();
			НоваяСтрока.ЗначениеПоказателя = ЗначенияПоказателейОбъектов[Объект][Показатель];
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

#Область ТестЗначенияПоказателейОбъекта

Функция ТестЗначенияПоказателейОбъекта_ЭталоннаяТаблица(КоллекцияПоказателей)
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Показатель");
	Результат.Колонки.Добавить("ЗначениеПоказателя");
	
	Если КоллекцияПоказателей.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого Показатель Из КоллекцияПоказателей Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Показатель			= Показатель.УникальныйИдентификатор();
		НоваяСтрока.ЗначениеПоказателя	= Истина;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ТестЗначенияПоказателейОбъекта_ЗаписатьЗначенияПоказателей(Объект, КоллекцияПоказателей)
	
	Если КоллекцияПоказателей.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	
	Для ИндексПоказателя = 0 По КоллекцияПоказателей.ВГраница() Цикл
		
		Показатель = КоллекцияПоказателей[ИндексПоказателя];
		
		ПериодическийРегистр = (ИндексПоказателя % 2 = 0);
		
		НаборЗаписей = ?(ПериодическийРегистр,
			РегистрыСведений.ЗначенияПериодическихПоказателейОбъектов.СоздатьНаборЗаписей(),
			РегистрыСведений.ЗначенияПоказателейОбъектов.СоздатьНаборЗаписей());
		
		Если ПериодическийРегистр Тогда
			//@skip-warning
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		КонецЕсли;
		
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НаборЗаписей.Отбор.Показатель.Установить(Показатель);
		
		Запись = НаборЗаписей.Добавить();
		
		Если ПериодическийРегистр Тогда
			Запись.Период = ТекущаяДата;
		КонецЕсли;
		
		Запись.Объект = Объект;
		Запись.Показатель = Показатель;
		Запись.ЗначениеПоказателя = Истина;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТестЗначенияПоказателейОбъекта_ПроверяемаяТаблица(Объект, КоллекцияПоказателей)
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Показатель");
	Результат.Колонки.Добавить("ЗначениеПоказателя");
	
	ЗначенияПоказателейОбъекта = ПоказателиОбъектов.ЗначенияПоказателейОбъекта(Объект, КоллекцияПоказателей);
	
	Для Каждого Показатель Из КоллекцияПоказателей Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Показатель = Показатель.УникальныйИдентификатор();
		НоваяСтрока.ЗначениеПоказателя = ЗначенияПоказателейОбъекта[Показатель];
		
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

#Область ТестЗначениеПоказателяОбъекта

Процедура ТестЗначениеПоказателяОбъекта_ЗаписатьЗначениеПоказателя(Объект, Показатель, Периодический = Ложь)
	
	НаборЗаписей = ?(Периодический,
		РегистрыСведений.ЗначенияПериодическихПоказателейОбъектов.СоздатьНаборЗаписей(),
		РегистрыСведений.ЗначенияПоказателейОбъектов.СоздатьНаборЗаписей());
		
	ТекущаяДата = ТекущаяДатаСеанса();
		
	Если Периодический Тогда
		//@skip-warning
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
	КонецЕсли;
	
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Показатель.Установить(Показатель);
	
	Запись = НаборЗаписей.Добавить();
	
	Если Периодический Тогда
		Запись.Период = ТекущаяДата;
	КонецЕсли;
	
	Запись.Объект = Объект;
	Запись.Показатель = Показатель;
	Запись.ЗначениеПоказателя = Истина;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти